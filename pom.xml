<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>logProject</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>logProject</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <main-class>org.cyan.App</main-class>
    </properties>

    <dependencies>
        <!-- 单元测试依赖-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>
        <!-- Log4j2 门面API-->
        <!--      <dependency>-->
        <!--        <groupId>org.apache.logging.log4j</groupId>-->
        <!--        <artifactId>log4j-api</artifactId>-->
        <!--        <version>2.11.1</version>-->
        <!--      </dependency>-->
        <!-- Log4j2 日志实现 -->
        <!--log4j2门面-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.20.0</version>
        </dependency>
        <!--log4j2实现-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.20.0</version>
        </dependency>
        <!--slf4j与log4j2的适配器-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.20.0</version>
        </dependency>
        <!--slf4j核心依赖-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <!-- 日志异步 -->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.22</version>
            <scope>compile</scope>
        </dependency>

        <!--netty-->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.72.Final</version>
        </dependency>
    </dependencies>
    <!--打包的几种方法-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <!--意味着在Maven执行到package这个生命周期阶段时，shade插件会开始工作，对项目进行shade处理，也就是通常所说的jar包重打包，将依赖项合并到主jar文件中。-->
                        <phase>package</phase>
                        <goals>
                            <!-- goal 的作用是将项目的依赖项与项目本身的代码一起打包成一个单一的 JAR 文件，通常称为 "uber-jar" 或 "fat-jar"-->
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!-- 带有shadedArtifactAttached为true：会生成两个包：不带有依赖的jar包、带有依赖的后缀为-shade的jar包 默认false，生成第二个-->
                            <!--                            <shadedArtifactAttached>true</shadedArtifactAttached>-->
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>${main-class}</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--        第二种: 在target文件夹下生成两个jar包，一个是不带依赖的jar包，一个是后缀有-dependencies带有依赖的jar包-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-assembly-plugin</artifactId>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>single</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <archive>-->
            <!--                                <manifest>-->
            <!--                                    <mainClass>-->
            <!--                                        org.cyan.App-->
            <!--                                    </mainClass>-->
            <!--                                </manifest>-->
            <!--                            </archive>-->
            <!--                            <descriptorRefs>-->
            <!--                                <descriptorRef>jar-with-dependencies</descriptorRef>-->
            <!--                            </descriptorRefs>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

            <!--           第三种:  使用maven-jar-plugin和maven-dependency-plugin插件打包-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-jar-plugin</artifactId>-->
            <!--                <version>3.3.0</version>-->
            <!--                <configuration>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            <addClasspath>true</addClasspath>-->
            <!--                            &lt;!&ndash;这里和下面outputDirectory的目录必须一致,否则运行jar包搜索不到libs&ndash;&gt;-->
            <!--                            <classpathPrefix>libs/</classpathPrefix>-->
            <!--                            <mainClass>org.cyan.App</mainClass>-->
            <!--                        </manifest>-->
            <!--                    </archive>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-dependency-plugin</artifactId>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>copy-dependencies</id>-->
            <!--                        <phase>prepare-package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>copy-dependencies</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <outputDirectory>-->
            <!--                                ${project.build.directory}/libs-->
            <!--                            </outputDirectory>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

        </plugins>
    </build>
</project>
